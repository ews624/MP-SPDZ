import pandas as pd
import math
import numpy as np
import mpc_math


sizeofK = 12
N =10
n = 0
eta = 0 
x =12
#2^N if N = 10
twoN = 1024

#sfix.set_precision(8,32)
#With above entro is .949219	
#Actually answer is .94
#with it commented out the entro is now .940338



def getX(v_1array, v_2array):
	
	x = sfix.Matrix(7,5)
	@for_range_opt([7,5])
	def f(i, j):
		x[i][j] = v_1array[i][j] + v_2array[i][j]
	
	return x
			

def lnArray(array):
	x = sfix.Matrix(7,5)
	@for_range_opt([7,5])
	def f(i, j):
			x[i][j] = mpc_math.log_fx(array[i][j],math.e)
	return x


def lcm(sizeofK):
	arr =[]
	for i in range(sizeofK -1):
		arr.append(i+2)
	nparray = arr
	k =np.lcm.reduce(nparray)
	#print_ln('%s',k)
	return k
	
def check_diff(x,i,sign):
	array = Array(100,sfix)
	diff = sfix(1000)
	besteta= Array(100,sfix)
	eta = sfix(0)
	topower = sfix(0)
	@for_range_opt(100)
	def kl(l):
		array[l] =sint(l)
		eta = sfix(array[l]/200)
		eta = eta *sign
		topower = mpc_math.exp2_fx(array[l])
		checker = (topower*(1+eta))
		comp = (x ==checker)
		if(comp.reveal()):
			return eta
		abso = abs(x-checker)
		if((abso<diff).reveal()):
			diff = abso
			besteta[l] = eta
		
	return besteta[99]	
	
	
	
def find_n_eta(x):
	i = 0
	eta = sfix(0)
	temp = Array(20,sfix)
	array = Array(20,sfix)
	expo = Array(20,sfix)
	midpoint = sfix(0)
	ansN = Array(1,sfix)
	ansEta = Array(1,sfix)
	print_ln('value of x is %s',x.reveal())
	@for_range_opt(20)
	def f(j):	
		
		array[j] = sint(j)
		#print_ln('j is %s',array[j].reveal())
		expo[j] = mpc_math.exp2_fx(array[j])
		#print_ln('2^j is %s',expo[j].reveal())
		lessthan = (expo[j] <x)
		equalto = (expo[j] ==x)
		if(equalto.reveal()):
			print_ln('perfect value')
			ansN[0] = array[j]
			ansEta[0] = sfix(0)
			return
			
		if(lessthan.reveal()):
			
			temp[j] = sint(j+1)
			temp[j] = mpc_math.exp2_fx(temp[j])
			greaterthan = (temp[j] >x)
			if(greaterthan.reveal()):
				midpoint = temp[j] * 1.5
				if((x > midpoint).reveal()):
					eta = check_diff(x,j+1,-1)
					ansN[0] = array[j]
					ansEta[0] = eta
					return
				if((x<midpoint).reveal()):
					eta = check_diff(x,j,1)
					ansN[0] = array[j]
					ansEta[0] = sfix(0)
					return
					
				else:
					eta = sfix(1.5)
					ansN[0] = array[j]
					ansEta[0] = eta
					return
					
	return ansN[0], ansEta[0]


def find_n(array):
	x = sfix.Matrix(7,5)
	@for_range_opt([7,5])
	def f(i, j):
			x[i][j] = mpc_math.log_fx(array[i][j],2.0)
	return x
	
	#test = sfix(0)
	'''
	@for_range_opt(10)
	def _(i):
		array[i] = sint(i)
		array[i+1] = sint(i+1)
	'''
	#test = mpc_math.log2_fx(x)
		
	#print_ln('closest int %s',test.reveal())
	

# if size of k is 12 then 27720

#k = lcm(sizeofK)
#print_ln('size of k is %s',k)
k=27720





p0_inputs = sint.Matrix(14,4)
p0_inputs.input_from(0)

'''
p2_inputs = sint.Matrix(7,5)
p2_inputs.input_from(1)
'''
print_ln('from p0 this should be 3 %s',p0_inputs[5][0].reveal())
'''
x = sfix.Matrix(7,5)
x = getX(p1_inputs,p2_inputs)

logX = sfix.Matrix(7,5)
logX = find_n(x)

#find_n(x)
print_ln('The N of x[6][0] is %s',logX[6][0].reveal())
print_ln('x[6][0] %s',x[6][0].reveal())
'''


'''
#finding n and eta 
n,eta = find_n_eta(x[0][0])
print_ln('The values of n and eta are %s, %s',n.reveal(),eta.reveal())
'''

'''
#this is 5
print_ln('X array is %s',x[6][0].reveal())

logarray = lnArray(x)
print_ln('ln of %s is %s',x[6][0].reveal(),logarray[6][0].reveal())
'''
def sec_entropy(examples, count):
	total = sfix.MemValue(0)
	yescount = sfix.MemValue(0)
	nocount = sfix.MemValue(0)
	entropy = sfix.MemValue(0)
	temp = sint(1)
	testing = sbit(1)
	array = Array(14,sint)

	@for_range_opt(14)
	def f(i):
		compvar = examples[i][count]
		if((temp<compvar).reveal()):
			array[i] = 2
			yescount.write(yescount +1)
		else:
			array[i]= 1
			nocount.write(nocount+1)
		total.write(total+1)
		
	#print_ln('Yes count is %s', yescount.reveal())
	#print_ln('No count is %s', nocount.reveal())
	'''
	@for_range_opt(14)
	def l(i):
		print_ln('%s',array[i].reveal())
		#print_ln('memvalue is %s', yescount.reveal())
	'''
	if ((nocount >0).reveal()):
		#print_ln('real entropy')
		
		nosint = sfix((nocount/total))
		yessint = sfix((yescount/total))
		testval = sfix(mpc_math.log2_fx(yessint))
		#print_ln('yessint is %s', testval.reveal())
		testval = sfix(mpc_math.log2_fx(nocount/total))
		#print_ln('nosint is %s', testval.reveal())
		#print_ln('total is %s',total.reveal())
		
		entropy.write( -((yescount/total)*(mpc_math.log2_fx(yescount/total)))-((nocount/total)*(mpc_math.log2_fx(nocount/total))) )
	else:
		print_ln('False entropy')
	return entropy
	
EntroArray = Array(4,sfix)	
@for_range_opt(4)
def fl(i):
	EntroArray[i] = sec_entropy(p0_inputs,i)
	print_ln('Entropy is %s',EntroArray[i].reveal())




'''
data = pd.read_csv("3-dataset.csv")
features = [feat for feat in data]
features.remove("answer")

class Node:
    def __init__(self):
        self.children = []
        self.value = ""
        self.isLeaf = False
        self.pred = ""

def entropy(examples):
    pos = 0.0
    neg = 0.0
    for _, row in examples.iterrows():
        if row["answer"] == "yes":
            pos += 1
        else:
            neg += 1
    if pos == 0.0 or neg == 0.0:
        return 0.0
    else:
        p = pos / (pos + neg)
        n = neg / (pos + neg)
        return -(p * math.log(p, 2) + n * math.log(n, 2))

def info_gain(examples, attr):
    uniq = np.unique(examples[attr])
    #print ("\n",uniq)
    gain = entropy(examples)
    #print ("\n",gain)
    for u in uniq:
        subdata = examples[examples[attr] == u]
        #print ("\n",subdata)
        sub_e = entropy(subdata)
        gain -= (float(len(subdata)) / float(len(examples))) * sub_e
        #print ("\n",gain)
    return gain

def ID3(examples, attrs):
    root = Node()

    max_gain = 0
    max_feat = ""
    for feature in attrs:
        #print ("\n",examples)
        gain = info_gain(examples, feature)
        if gain > max_gain:
            max_gain = gain
            max_feat = feature
    root.value = max_feat
    #print ("\nMax feature attr",max_feat)
    uniq = np.unique(examples[max_feat])
    #print ("\n",uniq)
    for u in uniq:
        #print ("\n",u)
        subdata = examples[examples[max_feat] == u]
        #print ("\n",subdata)
        if entropy(subdata) == 0.0:
            newNode = Node()
            newNode.isLeaf = True
            newNode.value = u
            newNode.pred = np.unique(subdata["answer"])
            root.children.append(newNode)
        else:
            dummyNode = Node()
            dummyNode.value = u
            new_attrs = attrs.copy()
            new_attrs.remove(max_feat)
            child = ID3(subdata, new_attrs)
            dummyNode.children.append(child)
            root.children.append(dummyNode)
    return root

def printTree(root: Node, depth=0):
    for i in range(depth):
        print("\t", end="")
    print(root.value, end="")
    if root.isLeaf:
        print(" -> ", root.pred)
    print()
    for child in root.children:
        printTree(child, depth + 1)

root = ID3(data, features)
printTree(root)

'''




'''
print_ln('Ethans test')

a = sint(1)
b = sint(2)

def test(actual, expected):

    # you can reveal a number in order to print it

    actual = actual.reveal()
    print_ln('expected %s, got %s', expected, actual)
'''

#test(a + b, 3)


'''
for i in 0, 1:
    print_ln('got %s from player %s', sint.get_input_from(i).reveal(), i)

# some arithmetic works as expected

test(a + b, 3)
test(a * b, 2)
test(a - b, -1)

# Division can mean different things in different domains
# and there has be a specified bit length in some,
# so we use int_div() for integer division.
# k-bit division requires (4k+1)-bit computation.

test(b.int_div(a, 15), 2)

# comparisons produce 1 for true and 0 for false

test(a < b, 1)
test(a <= b, 1)
test(a >= b, 0)
test(a > b, 0)
test(a == b, 0)
test(a != b, 1)

# if_else() can be used instead of branching
# let's find out the larger number
test((a < b).if_else(b, a), 2)

# arrays and loops work as follows

a = Array(100, sint)

@for_range(100)
def f(i):
    a[i] = sint(i) * sint(i - 1)

test(a[99], 99 * 98)

# if you use loops, use Array to store results
# don't do this
# @for_range(100)
# def f(i):
#     a = sint(i)
# test(a, 99)

# sfix: fixed-point numbers

# set the precision after the dot and in total

sfix.set_precision(16, 31)

# and the output precision in decimal digits

print_float_precision(4)

# you can do all basic arithmetic with sfix, including division

a = sfix(2)
b = sfix(-0.1)

test(a + b, 1.9)
test(a - b, 2.1)
test(a * b, -0.2)
test(a / b, -20)
test(a < b, 0)
test(a <= b, 0)
test(a >= b, 1)
test(a > b, 1)
test(a == b, 0)
test(a != b, 1)

test((a < b).if_else(a, b), -0.1)

# now let's do a computation with private inputs
# party 0 supplies three number and party 1 supplies three percentages
# we want to compute the weighted mean

print_ln('Party 0: please input three numbers not adding up to zero')
print_ln('Party 1: please input any three numbers')

data = Matrix(3, 2, sfix)

# use @for_range_opt for balanced optimization
# but use Python loops if compile-time numbers are need (e.g., for players)

@for_range_opt(3)
def _(i):
    for j in range(2):
        data[i][j] = sfix.get_input_from(j)

# compute weighted average

weight_total = sum(point[0] for point in data)
result = sum(point[0] * point[1] for point in data) / weight_total

# branching is supported also depending on revealed secret data
# with garbled circuits this triggers a interruption of the garbling

@if_e((sum(point[0] for point in data) != 0).reveal())
def _():
    print_ln('weighted average: %s', result.reveal())
@else_
def _():
    print_ln('your inputs made no sense')

# permutation matrix

M = Matrix(2, 2, sfix)
M[0][0] = 0
M[1][0] = 1
M[0][1] = 1
M[1][1] = 0

# matrix multiplication

M = data * M
test(M[0][0], data[0][1].reveal())
test(M[1][1], data[1][0].reveal())

'''




