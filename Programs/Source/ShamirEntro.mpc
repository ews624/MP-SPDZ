import math
import mpc_math

sfix.set_precision(16,32)

## NOTE: DATA columns in order from left to right are
# Color, Outline, Dot, Shape


class Tree:
	def __init__(self):
		self.left = None
		self.center = None
		self.right = None
		self.attribute = None
		self.data = None

def first_entropy(examples, count,range):
	entropy = sfix.MemValue(0)
	triangles = sint.MemValue(0)
	squares = sint.MemValue(0)
	different_attri = Array(2,sint)
	different_attri.assign_all(0)
	x = sfix(0)
	biggest = sint.MemValue(0)
	@for_range_opt(range)
	def f(i):
		compvar = examples[i][count]

		#sint(1) is the value for triangles in the dataset
		f = (compvar == sint(1))
		triangles.write(triangles+f)
		squares.write(squares+(sint(1)-f))

		f = (biggest < compvar)
		biggest.write((compvar*f)+(biggest*(sint(1)-f)))

	x = sfix(triangles)/sfix(range)
	y = sfix(squares)/sfix(range)
	entropy.write((-x*(mpc_math.log2_fx(x)))+(-y*(mpc_math.log2_fx(y))))

	return entropy


def get_gain(EntroValue,unique_vales,Comparison_Entropy,different_attri,range):
	sum_of_Entro = sfix.MemValue(0.0)
	@for_range_opt(unique_vales)
	def tr(i):
		sum_of_Entro.write(((different_attri[i]/range)*EntroValue[i])+ sum_of_Entro)
	gain = Comparison_Entropy - sfix(sum_of_Entro)
	return gain

def sec_entropy(examples,Comparison_Entropy,column_number,range):
	different_attri = Array(10,sfix)
	lastint = sint(0)
	skip = 0
	different_attri.assign_all(0)
	x = sfix(0)
	shape_array = Array(3,sfix)
	shape_array.assign_all(0)

	onevar = sint.MemValue(0)
	twovar = sint.MemValue(0)
	threevar = sint.MemValue(0)

	oneshape = sint.MemValue(0)
	twoshape = sint.MemValue(0)
	threeshape = sint.MemValue(0)

	gain = sfix(0.0)
	unique_vales = sint.MemValue(1)
	@for_range_opt(range)
	def f(i):
		compvar = examples[i][column_number]
		lastvar = examples[i][3]

		f = (compvar == sint(1))
		onevar.write(((onevar+1)*f)+  ((sint(1)-f)*onevar))
		f = (compvar == sint(2))
		twovar.write(((twovar+1)*f) +((sint(1)-f)*twovar))
		f = (compvar == sint(3))
		threevar.write(((threevar+1)*f)+((sint(1)-f)*threevar))

		lastint = (lastvar == sint(1))

		f = (compvar == sint(1))
		oneshape.write(((oneshape+lastint)*f)+  ((sint(1)-f)*oneshape))
		f = (compvar == sint(2))
		twoshape.write(((twoshape+lastint)*f) +((sint(1)-f)*twoshape))
		f = (compvar == sint(3))
		threeshape.write(((threeshape+lastint)*f)+((sint(1)-f)*threeshape))

		f = (unique_vales < compvar)
		unique_vales.write((compvar*f)+(unique_vales*(sint(1)-f)))

		if((sint(0) < sint(1)).reveal()):
			skip = 0


	return_Array = Array(3,sfix)
	different_attri[0] = onevar
	different_attri[1] = twovar
	different_attri[2] = threevar

	shape_array[0] = oneshape
	shape_array[1] = twoshape
	shape_array[2] = threeshape

	@for_range_opt(unique_vales.reveal())
	def W(i):
		denom = different_attri[i]
		top = shape_array[i]

		x = top/denom
		difference = denom-top
		y = difference/denom
		partone = (x*mpc_math.log2_fx(x))
		parttwo = (y*mpc_math.log2_fx(y))
		return_Array[i] = (-partone)+(-parttwo)

	gain = get_gain(return_Array,unique_vales.reveal(),Comparison_Entropy,different_attri,range)
	print_ln('Gain is %s',gain.reveal())
	return gain

def gainChecker(squares,triangles,totalofColor,root,shamir_input,ColorInt):
	latestEntro = sfix.MemValue(0.0)
	print_ln('in gainchecker num of squares is %s,triangles %s',squares.reveal(),triangles.reveal())

	root.center = Tree()
	root.right = Tree()

	squares = sfix(squares)
	triangles = sfix(triangles)
	totalofColor = sfix(totalofColor)
	x = sfix(squares/totalofColor)
	y = sfix(triangles/totalofColor)
	latestEntro = (-(x*mpc_math.log2_fx(x))-(y*(mpc_math.log2_fx(y))))
	print_ln('latestEntro is %s',latestEntro.reveal())
	totaldots = sint.MemValue(0)
	totalundotted = sint.MemValue(0)
	totaldashed = sint.MemValue(0)
	totalundashed = sint.MemValue(0)
	total = sfix.MemValue(0)
	color = sint(ColorInt)

	dashedTri = sint.MemValue(0)
	solidTri = sint.MemValue(0)
	dottedTri = sint.MemValue(0)
	undotTri = sint.MemValue(0)
	totalTri = sint.MemValue(0)

	dashedSqu = sint.MemValue(0)
	solidSqu = sint.MemValue(0)
	dottedSqu = sint.MemValue(0)
	undotSqu = sint.MemValue(0)
	totalSqu = sint.MemValue(0)
	#create deeper nodes
	@for_range_opt(42)
	def _(i):

		colorCheck = (shamir_input[i][0]== color)
		triCheck = (shamir_input[i][3] == sint(1))
		totalTri.write(totalTri+(colorCheck*triCheck))
		totalSqu.write(totalSqu+(colorCheck*(sint(1)-triCheck)))

		f = (sint(1)==shamir_input[i][2])
		dottedTri.write(dottedTri+(colorCheck*f*triCheck))
		dottedSqu.write(dottedSqu+(colorCheck*f*(sint(1)-triCheck)))

		undotTri.write(undotTri+(colorCheck*(sint(1)-f)*triCheck))
		undotSqu.write(undotSqu+(colorCheck*(sint(1)-f)*(sint(1)-triCheck)))

		da = (sint(1)==shamir_input[i][1])
		dashedTri.write(dashedTri+(colorCheck*da*triCheck))
		dashedSqu.write(dashedSqu+(colorCheck*(sint(1)-triCheck)*da))

		solidTri.write(solidTri+(colorCheck*(sint(1)-da)*triCheck))
		solidSqu.write(solidSqu+(colorCheck*(sint(1)-da)*(sint(1)-triCheck)))


		f = (sint(1)==shamir_input[i][2])
		l = (f*colorCheck)
		totaldots.write(totaldots+l)
		l = (sint(1)-f)*colorCheck
		totalundotted.write(totalundotted+l)

		f = (sint(1)==shamir_input[i][1])
		l = (f*colorCheck)
		totaldashed.write(totaldashed+l)
		f = (sint(1)-f)*colorCheck
		totalundashed.write(totalundashed+f)

		total.write(total+colorCheck)
	print_ln('total tri is %s and total squ is %s',totalTri.reveal(),totalSqu.reveal())
	print_ln('total tri dot is %s and total squ dot is %s',dottedTri.reveal(),dottedSqu.reveal())
	print_ln('total tri dash is %s and total squ dash is %s',dashedTri.reveal(),dashedSqu.reveal())

	print_ln('totaldots is %s and undotted is %s',totaldots.reveal(), totalundotted.reveal())

	print_ln('totaldashed is %s',totaldashed.reveal())


	outlineX = sfix(dashedTri)
	outlineBot = sfix(dashedTri+dashedSqu)

	outlineY = sfix(dashedSqu)

	x = sfix(outlineX/outlineBot)
	y = sfix(outlineY/outlineBot)
	partone = -(x*mpc_math.log2_fx(x))
	parttwo = -(y*mpc_math.log2_fx(y))
	entroOne = (partone+parttwo)
	print_ln('entroOne is %s',entroOne.reveal())
	print_ln('partone is %s and parttwo is %s',partone.reveal(),parttwo.reveal())
	totalItems = totalTri + totalSqu
	allSolid = solidTri + solidSqu
	allDashed = dashedSqu + dashedTri
	print_ln('total items is %s and allsolids is %s',totalItems.reveal(),allSolid.reveal())
	print_ln('all dashed is %s',allDashed.reveal())

	x = sfix(allSolid/totalItems)
	y = sfix(allDashed/totalItems)


	dottedX = sfix(dottedTri)
	dottedBot = sfix(dottedTri+dottedSqu)
	dottedY = sfix(dottedSqu)
	x =sfix(dottedX/dottedBot)
	y = sfix(dottedY/dottedBot)
	partone = -(x*mpc_math.log2_fx(x))
	parttwo = -(y*mpc_math.log2_fx(y))
	entrotwo = (partone+parttwo)
	print_ln('entrotwo is %s',entrotwo.reveal())
	print_ln('partone is %s and parttwo is %s',partone.reveal(),parttwo.reveal())
	'''
	top = sfix(totaldots)

	print_ln('total is %s',total.reveal())

	x = sfix(top/bot)
	y = sfix(totalundotted)
	y = sfix(y/bot)
	print_ln('x is %s and y is %s',x.reveal(),y.reveal())
	partone = -(x*mpc_math.log2_fx(x))
	parttwo = -(y*mpc_math.log2_fx(y))
	entroOne = (partone+parttwo)
	print_ln('entroOne is %s',entroOne.reveal())

	bot = sfix(total)
	top = sfix(totaldashed)
	x = sfix(top/bot)
	difference = sfix(totalundashed)
	y = sfix(difference/bot)
	partone = (-(x*mpc_math.log2_fx(x)))
	parttwo = (y*(mpc_math.log2_fx(y)))
	entrotwo = (partone-parttwo)

	entroOne = latestEntro - entroOne
	entrotwo = latestEntro - entrotwo
		'''
	f = (entroOne > entrotwo)
	mover = ((f*entroOne)+(entrotwo*(1-f)))
	root.center.data = mover.reveal()
	mover = (((1-f)*entroOne)+(f*entrotwo))
	root.right.data = mover.reveal()




def nodeGetter(range,allEntro,root,shamir_input,ColorInt):
	f = sint(-1)
	smallestEntro = sfix.MemValue(10.0)
	smallestindex = sint.MemValue(100)
	print_ln('')

	@for_range_opt(3)
	def _(i):
		f = (smallestEntro > allEntro[i])
		smallestindex.write((f*i)+ (smallestindex*(sint(1)-f)))
		smallestEntro.write((allEntro[i]*f)+ (smallestEntro*(sint(1)-f)))
		#print_ln('smallestEntro is %s, allEntro is %s',smallestEntro.reveal(),allEntro[i].reveal())
	print_ln('smallest index is %s which is %s',smallestindex.reveal(),allEntro[smallestindex.reveal()].reveal())
	root.left = Tree()

	#yellow = 2
	#green = 1
	#red = 3
	squares = sint.MemValue(0)
	triangles = sint.MemValue(0)
	totalcolor = sint.MemValue(0)

	@for_range_opt(42)
	def _(j):
		f = (ColorInt ==shamir_input[j][0])
		totalcolor.write(((totalcolor+1)*f)+(totalcolor*(sint(1)-f)))
		l = (sint(2) == shamir_input[j][3])
		squares.write(squares + (f*l))
		l = (sint(1) == shamir_input[j][3])
		triangles.write(triangles+(l*f))

	gainChecker(squares,triangles,totalcolor,root,shamir_input,ColorInt)
	root.left.data = smallestEntro.reveal()
	print_ln('root left data is %s',root.left.data)
	print_ln('root center data is %s',root.center.data)
	print_ln('root right data is %s',root.right.data)
	return smallestindex

def first_layer_tree(maxindex,shamir_input):

	yellowCount = sint.MemValue(0)
	redCount = sint.MemValue(0)
	greenCount = sint.MemValue(0)

	yellowTri = sint.MemValue(0)
	redTri = sint.MemValue(0)
	greenTri = sint.MemValue(0)


	yellowEntro = sfix(0.0)
	redEntro = sfix(0.0)
	greenEntro = sfix(0.0)

	allEntro = Array(3,sfix)

	column = maxindex.reveal()
	@for_range_opt(42)
	def _(i):
		tester = shamir_input[i][column]
		shape = shamir_input[i][3]
		y = (sint(2)== tester)
		r = (sint(3) == tester)
		g = (sint(1)== tester)

		yT = (y == shape)
		rT = (r == shape)
		gT = (g == shape)

		yellowTri.write(yellowTri + yT)
		redTri.write(redTri + rT)
		greenTri.write(greenTri + gT)

		yellowCount.write(yellowCount + y)
		redCount.write(redCount + r)
		greenCount.write(greenCount + g)

	top = sfix(yellowTri)
	bot = sfix(yellowCount)

	x = sfix(top/bot)
	difference = (bot - top)
	y = sfix(difference/bot)
	ans = (-(x*mpc_math.log2_fx(x))-(y*mpc_math.log2_fx(y)))
	yellowEntro = ans


	top = sfix(redTri)
	bot = sfix(redCount)

	x = sfix(top/bot)
	difference = (bot- top)
	y = sfix(difference/bot)
	ans = sfix((-(x*mpc_math.log2_fx(x)))+(-(y*mpc_math.log2_fx(y))))
	redEntro = ans

	top = sfix(greenTri)
	bot = sfix(greenCount)

	x = sfix(top/bot)
	difference = (bot-top)
	y = sfix(difference/bot)
	ans = (-(x*(mpc_math.log2_fx(x)))-(y*(mpc_math.log2_fx(y))))
	greenEntro = ans

	allEntro[0] = yellowEntro
	allEntro[1] = redEntro
	allEntro[2] = greenEntro

	root = Tree()
	root.data = 'Color'

	root.left = Tree()
	smallestindex = sint(0)
	smallestindex  =nodeGetter(range,allEntro,root.left,shamir_input,2)



	loopArray = Array(3,sfix)
	@for_range_opt(3)
	def _(t):
		f = (t == smallestindex).if_else(sfix(9.0),allEntro[t])
		loopArray[t] = f

	print_ln('loopArray at 0 is %s',loopArray[0].reveal())
	print_ln("root data is %s",root.data)
	print_ln("root left data is %s",root.left.data)

	root.center = Tree()
	#for red
	smallestindex  =nodeGetter(range,loopArray,root.center,shamir_input,3)


	newArray = Array(3,sfix)



	@for_range_opt(3)
	def _(t):
		f = (t == smallestindex).if_else(sfix(9.0),loopArray[t])
		newArray[t] = f
	#print_ln('root left data is %s',root.right.left.data)

	newArray[smallestindex.reveal()] = sfix(9.0)

	newestArray = Array(3,sfix)
	newestArray[0] = newArray[0]
	newestArray[1] = sfix(9.0)
	newestArray[2] = newArray[2]


	root.right = Tree()

	smallestindex  =nodeGetter(range,newArray,root.right,shamir_input,1)

	root.right.left.attribute = "Green"
	print_ln("Root right left data is %s",root.right.left.data)


	print_ln('yellow entropy is %s',yellowEntro.reveal())
	print_ln('green entropy is %s',greenEntro.reveal())
	print_ln('red entropy is %s',redEntro.reveal())

	#find of color then next highest gain Attribute(outline)


p0_inputs = sint.Matrix(14,4)
p0_inputs.input_from(0)

p1_inputs = sint.Matrix(14,4)
p1_inputs.input_from(1)

p2_inputs = sint.Matrix(14,4)
p2_inputs.input_from(2)

shamir_input = sint.Matrix(42,4)

@for_range_parallel(3,[14,4])
def hi(i,j):
	shamir_input[i][j] = p0_inputs[i][j]
	shamir_input[i+14][j] = p1_inputs[i][j]
	shamir_input[i+28][j] = p2_inputs[i][j]


EntroArray = Array(4,sfix)
total_shamir_array = sfix(0.0)
#calculate the Entropy of the Shape Attirbute
total_shamir_array = first_entropy(shamir_input,3,42)
print_ln('Entropy of the Shape attribute is %s', total_shamir_array.reveal())
Comparison_Entropy = total_shamir_array


gain_array = Array(3,sfix)
@for_range_opt(3)
def gainAll(i):
	gain_array[i]= sec_entropy(shamir_input,Comparison_Entropy,i,42)


f = sint(-1)
largestGain = sfix.MemValue(0.0)
maxindex = sint.MemValue(0)
@for_range_opt(3)
def _(i):
	f = (largestGain < gain_array[i])
	maxindex.write((f*i)+ (maxindex*(sint(1)-f)))
	largestGain.write((gain_array[i]*f)+ (largestGain*(sint(1)-f)))
print_ln('largest gain index is %s which is %s',maxindex.reveal(),gain_array[maxindex.reveal()].reveal())

print_ln('')
print_ln('')
print_ln('')
first_layer_tree(maxindex,shamir_input)
