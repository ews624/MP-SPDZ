import math
import mpc_math


argumentOne = program.args[1]
sfix.set_precision(16,32)
rows = 14
columns = 4

def generateArray(rows,columns):

    p0_inputs = sint.Matrix(rows,columns)
    p0_inputs.input_from(0)

    p1_inputs = sint.Matrix(rows,columns)
    p1_inputs.input_from(1)

    p2_inputs = sint.Matrix(rows,columns)
    p2_inputs.input_from(2)
    #Large Array
    CombinedInputs = sint.Matrix((3*rows),columns)

    @for_range_parallel(3,[rows,columns])
    def hi(i,j):
    	CombinedInputs[i][j] = p0_inputs[i][j]
		#By adding rows we offeset the start point for inputing data into the CombinedInputs array
    	CombinedInputs[i+rows][j] = p1_inputs[i][j]
    	CombinedInputs[i+(rows*2)][j] = p2_inputs[i][j]
    return CombinedInputs

def get_Entropy(CombinedInputs,column_number,range):
	value_tracking_array = Array(3,sfix)
	value_tracking_array.assign_all(0)
	lastint = sint(0)
	skip = 0
	shape_array = Array(3,sfix)
	shape_array.assign_all(0)

    #I am doing some cheating here, knowing that we have only 3 unique values for our dataset
    #I am just going to get track of them inidivually and hopefully it will be readable
	onevar = sint.MemValue(0)
	twovar = sint.MemValue(0)
	threevar = sint.MemValue(0)

    #Cheating again, here we are keeping track of one only shape of the at most 3 unique values
    #we will later find the amount of the other shape using subtraction
	oneshape = sint.MemValue(0)
	twoshape = sint.MemValue(0)
	threeshape = sint.MemValue(0)


	unique_vales = sint.MemValue(1)
	@for_range_opt(range)
	def f(i):
		compvar = CombinedInputs[i][column_number]
		shape_value = CombinedInputs[i][3]
		lastint = (shape_value == sint(1))

        #Since we are only checking for upto 3 unique values we only need to compare upto 3 possibilities

		f = (compvar == sint(1))
		onevar.write(((onevar+1)*f)+  ((sint(1)-f)*onevar))
		oneshape.write(((oneshape+lastint)*f)+  ((sint(1)-f)*oneshape))
		f = (compvar == sint(2))
		twovar.write(((twovar+1)*f) +((sint(1)-f)*twovar))
		twoshape.write(((twoshape+lastint)*f) +((sint(1)-f)*twoshape))
		f = (compvar == sint(3))
		threevar.write(((threevar+1)*f)+((sint(1)-f)*threevar))
		threeshape.write(((threeshape+lastint)*f)+((sint(1)-f)*threeshape))
		f = (unique_vales < compvar)
		unique_vales.write((compvar*f)+(unique_vales*(sint(1)-f)))

        #This fixes a bug with the program
        #I don't understand but this fixes it
		if((sint(0) < sint(1)).reveal()):
			skip = 0


	Entropy_Array = Array(3,sfix)
	value_tracking_array[0] = onevar
	value_tracking_array[1] = twovar
	value_tracking_array[2] = threevar

	shape_array[0] = oneshape
	shape_array[1] = twoshape
	shape_array[2] = threeshape

    #this calculates the entropy based on the 3 remaining attributes
    #since we only have 2 shapes to choose from, I am cheating again with partone and parttwo
    #
	@for_range_opt(unique_vales.reveal())
	def W(i):
		denom = value_tracking_array[i]
		top = shape_array[i]
		x = top/denom
		difference = denom-top
		y = difference/denom
		partone = (x*mpc_math.log2_fx(x))
		parttwo = (y*mpc_math.log2_fx(y))
		Entropy_Array[i] = (-partone)+(-parttwo)

	return Entropy_Array

def get_Color_Entropy(CombinedInputs,heuristic_column,range):

	Entropy_Array = Array(3,sfix)
	Entropy_Array = get_Entropy(CombinedInputs,heuristic_column,range)
	print_ln()
	print_ln()
	print_ln('The entropy for the color green is %s',Entropy_Array[0].reveal())
	print_ln('The entropy for the color yellow is %s',Entropy_Array[1].reveal())
	print_ln('The entropy for the color red is %s',Entropy_Array[2].reveal())

	return Entropy_Array


CombinedInputs = generateArray(rows,columns)
totalRows = rows*3
One = sint(int(argumentOne))
#For tree building our first layer has been determine from the attribute with the largest gain
#once we divide all inputs by color then we have to find the gain for outline and dot for each indivual color
#
color_Entropy = Array(3,sfix)
color_Entropy = get_Color_Entropy(CombinedInputs,One.reveal(),totalRows)




print_ln('%s',One.reveal())
